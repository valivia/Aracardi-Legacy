generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO
// improve card stages (how to persist data between stages? how to select which players are affected? etc)
// Properly work out user to support actual auth etc.

// USER #########################################################################################################
model User {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  name      String
  avatar_id String?

  favourite_addons Addon[] @relation("favourited_addons")
  favourite_games  Game[]  @relation("favourited_games")

  authored_games  AuthorToGame[]
  authored_addons AuthorToAddon[]
}

model AuthorToGame {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role

  author_id String @db.Uuid
  author    User   @relation(fields: [author_id], references: [id])

  game_id String @db.Uuid
  game    Game   @relation(fields: [game_id], references: [id])

  @@id([author_id, game_id])
}

model AuthorToAddon {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role

  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])

  addon_id String @db.Uuid
  addon    Addon  @relation(fields: [addon_id], references: [id])

  @@id([user_id, addon_id])
}

enum Role {
  AUTHOR
  CONTRIBUTOR
}

// GAME #########################################################################################################
model Game {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  title       String
  description String

  has_image   Boolean @default(false)
  is_official Boolean @default(false)

  // settings
  is_available_online  Boolean @default(false)
  is_available_offline Boolean @default(false)
  backlog_percentage   Float   @default(0.85)
  allow_hotjoin        Boolean @default(true)

  allow_poll  Boolean @default(true)
  allow_input Boolean @default(true)

  // Relationship
  addons        Addon[]
  session       Session[]
  authors       AuthorToGame[]
  favourited_by User[]         @relation("favourited_games")
}

// ADDON #########################################################################################################
model Addon {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  title       String
  description String

  is_official Boolean @default(false)
  has_image   Boolean @default(false)
  is_draft    Boolean @default(true)

  online_size       Int @default(0)
  online_nsfw_size  Int @default(0)
  offline_size      Int @default(0)
  offline_nsfw_size Int @default(0)

  // Relationship
  game_id       String          @db.Uuid
  game          Game            @relation(fields: [game_id], references: [id])
  cards         Card[]
  authors       AuthorToAddon[]
  favourited_by User[]          @relation("favourited_addons")
}

model Card {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  minimum_players Int?
  maximum_players Int?

  is_available_online  Boolean @default(false)
  is_available_offline Boolean @default(false)
  is_nsfw              Boolean @default(false)

  stages Stage[]

  // Relationship
  addon_id String @db.Uuid
  addon    Addon  @relation(fields: [addon_id], references: [id])
}

model Stage {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  type StageType

  // Base
  title      String?
  time_limit Int?

  // Text Card
  text      String?
  has_image Boolean? @default(false)
  turns     Int?

  // Poll Card
  winner_points   Int?
  selection_count Int?
  options         Json[]

  // Input Card
  target String[]

  // relation
  card    Card   @relation(fields: [card_id], references: [id])
  card_id String @db.Uuid
}

enum StageType {
  TEXT
  POLL
  INPUT
}

// SESSION #########################################################################################################
model Session {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now())

  join_code String @unique

  // Settings
  timer_multiplier Float   @default(1)
  turn_multiplier  Float   @default(1)
  allow_nsfw       Boolean @default(true)

  // Relations
  players Player[]

  game_id String @db.Uuid
  game    Game   @relation(fields: [game_id], references: [id])
}

model Player {
  id    String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token String

  name      String
  avatar_id String @db.Uuid
  points    Int    @default(0)

  // Relations
  session    Session @relation(fields: [session_id], references: [id])
  session_id String  @db.Uuid
}
