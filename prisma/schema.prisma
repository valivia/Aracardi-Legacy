// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// USER #########################################################################################################
model User {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  Game              Game?   @relation(fields: [authored_game_ids], references: [id])
  authored_game_ids String? @db.ObjectId

  Addon              Addon?  @relation(fields: [authored_addon_ids], references: [id])
  authored_addon_ids String? @db.ObjectId
}

// GAME #########################################################################################################
model Game {
  created_at DateTime @default(now()) @db.Timestamp()
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  title            String
  description      String
  default_settings Settings

  has_image            Boolean @default(false)
  is_official          Boolean @default(false)
  is_available_online  Boolean @default(true)
  is_available_offline Boolean @default(true)

  addons Addon[]

  // Relationship
  authors User[]
  session Session[]
}

model Player {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String

  name   String
  avatar String
  points Int    @default(0)

  // Relations
  session    Session @relation(fields: [session_id], references: [id])
  session_id String  @db.ObjectId
}

// ADDON #########################################################################################################
model Addon {
  created_at DateTime @default(now()) @db.Timestamp()
  updatedAt  DateTime @updatedAt
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String
  is_official Boolean @default(false)
  is_draft    Boolean @default(true)

  game_id String
  game    Game   @relation(fields: [game_id], references: [id])

  cards Card[]

  // Relationship
  authors User[]
}

model Card {
  created_at DateTime @default(now()) @db.Timestamp()
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  turns           Int?
  minimum_players Int?
  maximum_players Int?

  stages Stage[]

  is_nsfw Boolean @default(false)

  // Relationship
  addon_id String @db.ObjectId
  addon    Addon  @relation(fields: [addon_id], references: [id])
}

type Stage {
  type stageType

  // Base
  title      String?
  time_limit Int?

  // Text Card
  text      String
  has_image Boolean @default(false)

  // Poll Card
  winner_points   Int?
  selection_count Int?
  options         pollOption[]

  // Input Card
  target String[]
}

enum stageType {
  TEXT
  POLL
  INPUT
}

type pollOption {
  id   String @db.ObjectId
  text String
}

// SESSION #########################################################################################################
model Session {
  created_at DateTime @default(now()) @db.Timestamp()
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  join_code String
  settings  Settings

  players Player[]

  // Relations
  game_id String @db.ObjectId
  game    Game   @relation(fields: [game_id], references: [id])

  addon_ids String[] @db.ObjectId
}

// OTHER #########################################################################################################
type Settings {
  use_timers Boolean @default(true)
  use_images Boolean @default(true)
  use_loop   Boolean @default(true)
  use_nsfw   Boolean @default(false)

  timer_multipler Float @default(1)
  turn_multipler  Float @default(1)

  backlog_percentage Float @default(0.85)
}
