openapi: 3.0.3
info:
  title: Aracardi
  description: |-
    Aracardi api
  version: 1.0.11
servers:
  - url: http://127.0.0.1/api/
  - url: https://aracardi.hootsifer.com/api/
tags:
  - name: game
    description: Everything about the available games
  - name: addon
    description: Everything about the available addons
  - name: session
    description: Interact with ongoing sessions
paths:
  /game:
    post:
      tags:
        - game
      summary: Create game.
      description: Create a new game.
      responses:
        "200":
          description: Successful operation
        "404":
          description: No game found
        "401":
          description: unauthorised
        "400":
          description: Invalid request
    get:
      tags:
        - game
      summary: All games.
      description: Get a list of all games.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseGame"
        "404":
          description: No games found
  /game/{gameId}:
    put:
      tags:
        - game
      summary: Update game config.
      parameters:
        - name: gameId
          in: path
          description: ID of game to modify
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: No games found
        "401":
          description: unauthorised
        "400":
          description: Invalid request
    delete:
      tags:
        - game
      summary: Delete game.
      description: Delete a game.
      parameters:
        - name: gameId
          in: path
          description: ID of game to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: No games found
        "401":
          description: unauthorised
    get:
      tags:
        - game
      summary: get game.
      description: Get game and its available s.
      parameters:
        - name: gameId
          in: path
          description: ID of game to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "404":
          description: No game found
  /session:
    post:
      tags:
        - session
      summary: Create a new session
      description: "create a new session"
      operationId: updatePetWithForm
      responses:
        "405":
          description: Invalid input
  /session/{sessionId}:
    post:
      tags:
        - session
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    get:
      tags:
        - session
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - session
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - session
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    BaseGame:
      type: object
      properties:
        id:
          type: string
          example: 63964fd8ff9e2d8649857828
        title:
          type: string
          example: Drunk pirate
        description:
          type: string
          example: A drinking game
        has_game:
          type: boolean
        is_official:
          type: boolean
        is_available_online:
          type: boolean
        is_available_offline:
          type: boolean
    Game:
      allOf:
        - $ref: "#/components/schemas/BaseGame"
        - properties:
            addons:
              type: string
            default_settings:
              type: string
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
