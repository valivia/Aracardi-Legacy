openapi: 3.0.3
info:
  title: Aracardi
  description: |-
    Aracardi api
  version: 1.0.11
servers:
  - url: http://127.0.0.1/api/
  - url: https://aracardi.hootsifer.com/api/
tags:
  - name: game
    description: Everything about the available games
  - name: addon
    description: Everything about the available addons
  - name: session
    description: Interact with ongoing sessions
paths:
  /game:
    post:
      tags:
        - game
      summary: Create game.
      description: Create a new game.
      responses:
        "200":
          description: Successful operation
        "404":
          description: No game found
        "401":
          description: unauthorised
        "400":
          description: Invalid request
    get:
      tags:
        - game
      summary: All games.
      description: Get a list of all games.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseObject"
        "404":
          description: No games found
  /game/{gameId}:
    put:
      tags:
        - game
      summary: Update game config.
      parameters:
        - name: gameId
          in: path
          description: ID of game to modify
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: No games found
        "401":
          description: unauthorised
        "400":
          description: Invalid request
    delete:
      tags:
        - game
      summary: Delete game.
      description: Delete a game.
      parameters:
        - name: gameId
          in: path
          description: ID of game to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: No games found
        "401":
          description: unauthorised
    get:
      tags:
        - game
      summary: get game.
      description: Get game and its available s.
      parameters:
        - name: gameId
          in: path
          description: ID of game to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "404":
          description: No game found
  /session:
    post:
      tags:
        - session
      summary: Create a new session
      description: "create a new session"
      operationId: updatePetWithForm
      responses:
        "405":
          description: Invalid input
  /session/{sessionId}:
    post:
      tags:
        - session
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    get:
      tags:
        - session
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - session
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Session"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - session
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: sessionId
          in: path
          description: ID of session to update
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    BaseObject:
      type: object
      properties:
        id:
          type: string
          example: 63964fd8ff9e2d8649857828
        title:
          type: string
          example: Drunk pirate
        description:
          type: string
          example: A drinking game
        has_image:
          type: boolean
        is_official:
          type: boolean
        is_available_online:
          type: boolean
        is_available_offline:
          type: boolean
    Game:
      allOf:
        - $ref: "#/components/schemas/BaseObject"
        - properties:
            addons:
              type: array
              items:
                $ref: "#/components/schemas/BaseAddon"
            default_settings:
              type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    BaseAddon:
      allOf:
        - $ref: "#/components/schemas/BaseObject"
    Addon:
      allOf:
        - $ref: "#/components/schemas/BaseAddon"
        - properties:
            cards:
              type: array
              items:
                $ref: "#/components/schemas/Card"
    Card:
      type: object
      properties:
        id:
          type: string
          example: 63964fd8ff9e2d8649857828
        minimum_players:
          type: integer
          format: int32
        maximum_players:
          type: integer
          format: int32
        is_nsfw:
          type: boolean
    Session:
      type: object
      properties:
        id:
          type: string
          example: 63964fd8ff9e2d8649857828

  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
